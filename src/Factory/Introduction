It is a type of Creational Pattern

What is the most usual method of creating an instance of a class in java?
Most people will answer this question: “using new keyword“.
Well, it is considered old-fashioned now. Let’s see how??


If object creation code is spread in the whole application,
and if you need to change the process of object creation    (NOTE)
then you need to go in each and every place to make necessary changes.
After finishing this article, while writing your application, consider using the Java factory pattern.

Factory, as the name suggests, is a place to create some different products
which are somehow similar in features yet divided into categories.


In Java, factory pattern is used to create instances of different classes of the same type.


1. When to use factory pattern?
Factory pattern introduces loose coupling between classes
which is the most important principle one should consider and apply while designing the application architecture.
Loose coupling can be introduced in application architecture by programming against abstract entities
rather than concrete implementations.
This not only makes our architecture more flexible but also less fragile.



Above class-diagram depicts a common scenario using an example of a car factory
which is able to build 3 types of cars i.e. small, sedan and luxury.
Building a car requires many steps from allocating accessories to final makeup.
These steps can be written in programming as methods
and should be called while creating an instance of a specific car type.



If we are unfortunate then we will create instances of car types (e.g. SmallCar)
in our application classes and thus we will expose the car building logic to the outside world
and this is certainly not good.
It also prevents us in making changes to car making process because the code is not centralized,
and making changes in all composing classes seems not feasible.



3. Benefits of factory pattern
The creation of an object precludes its reuse without significant duplication of code.
The creation of an object requires access to information or resources that should not be contained within the composing class.
The lifetime management of the generated objects must be centralized to ensure a consistent behavior within the application.


Factory pattern is most suitable where there is some complex object creation steps are involved.
To ensure that these steps are centralized and not exposed to composing classes, factory pattern should be used.
 We can see many realtime examples of factory pattern in JDK itself e.g.

 java.sql.DriverManager#getConnection()
 java.net.URL#openConnection()
 java.lang.Class#newInstance()
 java.lang.Class#forName()



